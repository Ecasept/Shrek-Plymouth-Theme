
#Window.SetBackgroundTopColor(0.141, 0.141, 0.141);
#Window.SetBackgroundBottomColor(0.141, 0.141, 0.9);

shrekImage = Image("shrek.png");
logoImage = Image("logo.png");
logoImage = logoImage.Scale(logoImage.GetWidth() * 0.25, logoImage.GetHeight() * 0.25);

shreksPerColumn = 5;
targetShrekHeight = Window.GetHeight() / shreksPerColumn;
scaleFactor = targetShrekHeight / shrekImage.GetHeight();
shrekImage = shrekImage.Scale(targetShrekHeight, shrekImage.GetWidth() * scaleFactor);


shreksPerRow = Math.Int(Window.GetWidth() / shrekImage.GetWidth());
horizontalExtraSpace = (Window.GetWidth() % shrekImage.GetWidth());
horizontalSpacing = horizontalExtraSpace / (shreksPerRow - 1);














fadeTime = 1;
logoTime = 1;

spiralFinished = 0;

# Every item needs a reference(or it will be deleted), so save every created shrek sprite
shreks = [];
shrekCount = 0;


debug = Sprite();
# debug.SetPosition(Window.GetWidth() / 2, Window.GetHeight() / 2, 100);
debug.SetPosition(0, 0, 100);
fun log(msg) {
    return; # Disable debug
    debug.SetImage(Image.Text(msg, 255, 255, 255));
}

fun Shrek(creationTime) {
    newShrek = [];
    newShrek.creationTime = creationTime;
    newShrek.sprite = Sprite(shrekImage);
    return newShrek;
}


fun centerSprite(sprite) {
    sprite.SetX(Window.GetWidth() / 2 - sprite.GetImage().GetWidth() / 2);
    sprite.SetY(Window.GetHeight() / 2 - sprite.GetImage().GetHeight() / 2);
}

fun ceil(num) {
    return Math.Int(num + 0.5);
}

fun addShrek(time) {
    width = shrekImage.GetWidth();
    height = shrekImage.GetHeight();

    index = shrekCount;
    shrekCount++;

    shreks[index] = Shrek(time);
    shreks[index].sprite.SetImage(shrekImage);

    nextTile();
    shreks[index].sprite.SetPosition(cX * width + cX * horizontalSpacing, cY * height, 10);
    shreks[index].sprite.SetOpacity(0);

    # Check if last shrek
    if (cX == ceil(shreksPerRow / 2) - 1 && cY == ceil(shreksPerColumn / 2) - 1) {
        spiralFinished = 1;
    }

    if (spiralFinished) {
        # last shrek

        # Fade in
        Animation(shreks[index].sprite, time, fadeTime / 2, 0, 1, quadraticOut, fun(sprite, val) {
            sprite.SetOpacity(val);
        }, fun(sprite, time) {
            # Wait
            Animation(sprite, time, fadeTime / 2, 1, 1, linear, fun(sprite, val) {
                # Do nothing
            }, fun(sprite, time) {
                animateLogo(time);
            });
        });
    } else {
        # other shreks

        # Fade in
        Animation(shreks[index].sprite, time, fadeTime / 2, 0, 1, quadraticOut, fun(sprite, val) {
            sprite.SetOpacity(val);
        }, fun(sprite, time) {
            # Fade out
            Animation(sprite, time, fadeTime / 2, 1, 0, quadraticIn, fun(sprite, val) {
                sprite.SetOpacity(val);
            }, fun(sprite, time) {
                
            });
        });
    }
}

# Spiral Traversal
left = 0;
right = shreksPerRow - 1;
top = 0;
bottom = shreksPerColumn - 1;

dir = "r";
cX = -1;
cY = 0;
fun nextTile() {
    if (dir == "r") {
        cX++;
        if (cX == right) {
            top++;
            dir = "d";
        }
    }
    else if (dir == "l") {
        cX--;
        if (cX == left) {
            bottom--;
            dir = "u";
        }
    }
    else if (dir == "u") {
        cY--;
        if (cY == top) {
            left++;
            dir = "r";
        }
    }
    else if (dir == "d") {
        cY++;
        if (cY == bottom) {
            right--;
            dir = "l";
        }
    }
}



animationsFinished = 0;



logoAnimStart = -1;
logoSprite = Sprite();
logoSprite.SetImage(logoImage);
logoSprite.SetOpacity(0);

lastShrekXTile = ceil(shreksPerRow / 2) - 1;
lastShrekPos = lastShrekXTile * shrekImage.GetWidth() + lastShrekXTile * horizontalSpacing;
logoStartXPos = lastShrekPos + shrekImage.GetWidth() - logoImage.GetWidth();
logoSprite.SetPosition(logoStartXPos, Window.GetHeight() / 2 - logoImage.GetHeight() / 2, -11);


# shrekImage and logoImage are next to each other and should be in the middle

logoSpacing = shrekImage.GetWidth() / 6;

combinedWidth = shrekImage.GetWidth() + logoImage.GetWidth() + logoSpacing;
combinedMiddle = Window.GetWidth() / 2 - combinedWidth / 2;

logoEndX = combinedMiddle + shrekImage.GetWidth() + logoSpacing;


shrekEndX = combinedMiddle;

blackImage = Image("black.png");
blackImage.Scale(Window.GetWidth(), Window.GetHeight());

blackRightEdgePos = lastShrekPos + shrekImage.GetWidth(); # Position of right edge
blackPos = blackRightEdgePos - blackImage.GetWidth();
# Subtract half of shrek so that it doesn't overlap with the logo
blackPos -= shrekImage.GetWidth() / 2;

blackSprite = Sprite(blackImage);
blackSprite.SetPosition(blackPos, 0, -10);
blackSprite.SetOpacity(1);

logoAnimRange = logoEndX - logoStartXPos;

fun animateLogo(time) {
    # Animate logo to the right
    Animation(logoSprite, time, logoTime, logoStartXPos, logoEndX, sineInOut, fun(sprite, val) {
        sprite.SetX(val);
    }, fun(sprite, time) {
        animationsFinished = 1;
    });
    
    # Animate logo opacity
    Animation(logoSprite, time, logoTime, 0, 1, sineOut, fun(sprite, val) {
        sprite.SetOpacity(val);
    }, fun(sprite, time) {});
   
    # Animate shrek to the left
    Animation(shreks[shrekCount - 1].sprite, time, logoTime, lastShrekPos, shrekEndX, sineInOut, fun(sprite, val) {
        sprite.SetX(val);
    }, fun(sprite, time) {});
    
    # Animate black to the left
    offset = lastShrekPos - shrekEndX; # Animate the same as shrek
    Animation(blackSprite, time, logoTime, blackPos, blackPos - offset, sineInOut, fun(sprite, val) {
        sprite.SetX(val);
    }, fun(sprite, time) {});
}

iterations = 0;
tickStep = 0.1;
lastTick = 1;

fun progress_callback(time, progress) {
    # log("height: " +  Window.GetHeight() + " time: " + time + " s0x: " + shreks[0].sprite.GetY() + " s-1x: " + shreks[shrekCount-1].sprite.GetY() + " shrekHeight: " + shrekImage.GetHeight() + " targetShrekHeight: " + targetShrekHeight + " scaleFactor: " + scaleFactor + " progress: " + progress);
    animationTick(time);
    printProgress(time, progress);
    if (time - lastTick >= tickStep && !spiralFinished) {
       addShrek(time);
       iterations++;
       lastTick += tickStep;
    }
}
Plymouth.SetBootProgressFunction(progress_callback);



# =============================================
# -------------  Other Callbacks --------------
# =============================================

# logo sprite is taller than actual text
# if we say the extra space at the bottom = 1, then the whole sprite is 2 + 4/5
offsetFactor = (1/ (2+4/5));

statusSprite = Sprite();
messageSprite = Sprite();

fun setStatus(status) {
    offset = offsetFactor * logoImage.GetHeight();
    if (!animationsFinished) {
        return;
    }
    statusSprite.SetImage(Image.Text(status, 255, 255, 255));
    statusSprite.SetX(logoEndX + logoSprite.GetImage().GetWidth() / 2 - statusSprite.GetImage().GetWidth() / 2);
    statusSprite.SetY(logoSprite.GetY() + logoSprite.GetImage().GetHeight() + 10 - offset);
}

fun setMessage(message) {
    offset = offsetFactor * logoImage.GetHeight();
    if (!animationsFinished) {
        return;
    }
    messageSprite.SetImage(Image.Text(message, 255, 255, 255));
    messageSprite.SetX(logoEndX + logoSprite.GetImage().GetWidth() / 2 - messageSprite.GetImage().GetWidth() / 2);
    messageSprite.SetY(logoSprite.GetY() + logoSprite.GetImage().GetHeight() + 30 - offset);
}

Plymouth.SetUpdateStatusFunction(setStatus);
Plymouth.SetDisplayPasswordFunction(fun(prompt, bulletCount) {
    bullets = "";
    for (local.i = 0; local.i < bulletCount; local.i++) {
        bullets += "*";
    }
    setMessage(prompt + "\n> " + bullets);
});
Plymouth.SetDisplayQuestionFunction(fun(prompt, entryContents) {
    setMessage(prompt + "\n> " + entryContents);
});
Plymouth.SetDisplayNormalFunction(fun() {
    setStatus("");
    setMessage("");
});
Plymouth.SetMessageFunction(setMessage);

# =============================================
# ------------- Animation Engine --------------
# =============================================


fun lerp(start, end, progress, ease) {
    return start + (end - start) * ease(progress);
}
fun linear(val) {
    return val;
}
fun flip(val) {
    return 1 - val;
}
fun quadraticIn(val) {
    return val * val;
}
fun quadraticOut(val) {
    return flip(quadraticIn(flip(val)));
}
fun quadraticInOut(x) {
    return lerp(quadraticIn(x), quadraticOut(x), x, linear);
}

fun cubicIn(val) {
    return val * val * val;
}
fun cubicOut(val) {
    return flip(cubicIn(flip(val)));
}
fun cubicInOut(x) {
    return lerp(cubicIn(x), cubicOut(x), x, linear);
}


fun sineIn(val) {
    return 1 - Math.Cos(val * Math.Pi / 2);
}

fun sineOut(val) {
    return Math.Sin(val * Math.Pi / 2);
}

fun sineInOut(val) {
    return lerp(sineIn(val), sineOut(val), val, linear);
}

animObjects = [];
animObjectsLength = 0;

# -------- Animation Tick for all animations ----------
fun animationTick(time) {
    for (local.i = 0; local.i < animObjectsLength; local.i++) {
        animObjects[local.i].tick(time);
    }
}

# --------------- Constructor -----------------
Animation = fun(target, startTime, duration, start, end, easing, tickCallback, endCallback) {
    newAnim = [] | global.Animation;
    newAnim.target = target;
    newAnim.startTime = startTime;
    newAnim.duration = duration;
    newAnim.easing = easing;
    newAnim.tickCallback = tickCallback;
    newAnim.endCallback = endCallback;
    newAnim.start = start;
    newAnim.end = end;

    newAnim.hasEnded = 0;

    animObjects[animObjectsLength] = newAnim;
    animObjectsLength++;

    return newAnim;
} | [];

# --------------- Animation Tick -----------------
Animation.tick = fun(time) {
    if (this.hasEnded) {
        return;
    }

    existenceTime = time - this.startTime;
    progress = existenceTime / this.duration;

    val = lerp(this.start, this.end, progress, this.easing);

    val = Math.Min(val, Math.Max(this.start, this.end));
    # clamp doesn't work, probably because it clamps even if
    # eg. val == start and then does something like val = end
    #val = Math.Clamp(val, this.start, this.end);
    

    if (existenceTime > this.duration) {
        this.tickCallback(target, end);
        this.endCallback(target, time);
        this.hasEnded = 1;
        return;
    }
    this.tickCallback(target, val);

};
